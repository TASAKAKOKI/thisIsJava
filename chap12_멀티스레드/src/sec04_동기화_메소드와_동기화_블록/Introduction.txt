공유 객체를 사용할 때의 주의점
	멀티스레드가 하나의 객체를 공유하므로서 생기는 오류
		가령,thread1과 thread2가 calculator라고 하는 객체를 서로 사용할때,
		thread1이 memory라는 변수에 100을 저장한뒤, 2초간 sleep()을 실행하고,
		thread2가 memory라는 변수에 50을 저장한뒤, 2초간 sleep()을 실행한다면,
		thread1가 2초 sleep()한 이후, memory변수에 저장된 값을 출력하면,
		thread1이 저장한 100이 아닌 thread2가 저장한 50이 반환되는 문제가 생길 수 있다.

동기화 메소드 및 동기화 블록 (synchronized메소드 synchronized블록)
	"단 하나의 스레드만 실행할 수 있는 메소드 또는 블록"을 말한다.
	다른 스레드는 동기화메소드나 동기화블록이 실행이 끝날 때까지 대기해야 한다.
		위에서의 예제처럼 두 스레드가 하나의 객체를 공유하고 있을때,
		공유되고 있는 객체가 동기화 블록 처리 되어있다면,
		하나의 스레드가 공유객체를 사용하는동안에,
		다른 스레드는 잠겨있는 공유객체를 사용할 수 없다.

	동기화 메소드 만드는 방법
		public synchronized void method() {
			임계영역; //단 하나의 스레드만 실행할 수 있는 영역
		}	
	
	동기화 블록을 만드는 방법
		public void method() {
			//여러 스레드가 실행 가능한 영역
			synchronized(공유객체) {
				임계영역; //단 하나의 스레드만 실행
			}
			//여러 스레드가 실행 가능한 영역
		}
	
	객체잠금
		잠금이란, 동기화블록이나 동기화메소드가 하나의 스레드에 의해 사용되고 있는 동안,
		다른 스레드가 사용할 수 없도록 막는 것을 의미
		
		class Calculator {
			synchronized void m1(){...}
			synchronized void m2(){...}
			void m3() {
				synchronized(this) {...}
			}
		}	
		//스레드1이 동기화 메소드를 실행하고 있다면,
		//스레드2는 사용중인 동기화 메소드뿐만 아니라,
		//동기화 블록도 사용할 수 없다.
		//다만, 일반 메소드는 사용할 수 있다.
			TCP네트워킹
TCP(Transmission Control Protocol)
	특징
		연결 지향적 프로토콜 -> 통신을 하기 위해서는 우선 연결부터 해야한다 는 의미 -> 처음엔 다소 시간 소요가 됨
		통신 선로 고정 	 -> 두 프로그램이 TCP로 통신을 하려면, 연결이 필요하며, 연결 후에는 데이터를 통신하기 위한 회선이 고정이 됨 -> (처음 연결시 회선의 속도에 따라) 전송 속도가 느려질 수도 있음
		데이터를 정확하고 안정적으로 전달
		
	java.net.API
		java는 TCP를 지원하기 위해 두가지 API를 제공
			ServerSocket
			Socket
		
	ServerSocket과 Socket의 용도
		클라이언트						
			Socket
			 연결요청을 하기 위한 객체
			 Socket을 생성 할 때 혹은 생성 후 연결 요청 할 수 있다.
			 서버가 연결을 수락하고 통신 Socket을 생성하면,
			 클라이언트의 Socket을 가지고 서버의 통신 Socket과 통신을 한다.
			 		
		서버
			ServerSocket
			 연결수락을 하기 위해 사용하는 API
			 특정 포트(프로그램 식별 번호)(바인딩포트 라고도 함)를 가지고 실행
			 특정 포트에서 실행이 된 이후, client에 연결을 수락하기 위해서 대기 상태에 있게 되는데,
			 대기하는 메소드가 연결을 수락하는 역할을 하는 accept()이다.
			 클라이언트에서 연결 요청을 해오면, accept()는 연결을 수락한 뒤, 클라이언트와 통신할 수 있는 Socket객체를 생성한다.
										 
 ServerSocket 생성과 연결 수락 (서버 측)
 		SeverSocket생성과 포트 바인딩
 		//방법1
 		ServerSocket serverSocket = new ServerSocket(5001);
 			//ServerSocket을 생성할 때, 생성자 매개값으로 포트번호를 주면, 해당 포트에 바인딩 된 ServerSocket을 얻을 수 있다.
 			
 		//방법2
 		ServerSocket serverSocket = new ServerSocekt();
 		serverSocket.bind( (new InetSocketAddress("127.0.0.1", 5001) ); 
 			//ServerSocket을 미리 생성하고, bind()메소드를 이용해서, 매개값으로 주어진 InetSocketAddress()객체가 가지고 있는 정보를 가지고 생성할 수 있다.
 			//InetSocketAddress() 생성시 첫번째 매개값은 IP주소이고, 두번째 매개값은 바인딩 할 포트번호이다.
 			//만약 컴퓨터에 두 개의 네트워크 어댑터가 있다면, 그 중 한 어댑터에 할당된 IP주소를 넣어줘도 된다.
 	
 	연결 수락
 		try {
 			Socket socket = serverSocket.accept(); //accept()는 클라이언트가 연결 요청을 해오기 전까지 대기 상태,
 												  //클라이언트가 연결 요청을 하면, accept()는 통신용 소켓을 반환
 		} catch(Exception e) {}
 		
 			연결된 클라이언트 IP 주소 얻기
 			:어떤  클라이언트가 연결 요청을 했는지 정보를 얻기
 				InetSocketAddress socketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();
				생성된 객체를 가지고 사용가능한 메소드
					리턴타입	메소드(매개변수)	설명
 					String 	getHostName()	클라이언트 IP리턴
 					int		getPort()		클라이언트 포트 번호 리턴
 					String	toString()		"IP:포트번호" 형태의 문자열 리턴	
 					
 	ServerSocket 포트 언바인딩
 	:serverSocket를 더이상 실행하지 않고, 종료시킬 때 사용
 		serverSocket.close();
 		
 Socket 생성과 연결 요청(클라이언트 측)
 	Socket 생성 및 연결 요청
 		try{
 			//방법1: 매개값1:서버의 IP주소("localhost"를 건네줄 경우, 현재 컴퓨터에서 실행하고 있는 서버에 접속한다는 의미)
 			//	    매개값2:서버의 포트번호 
	 			Socket socket = new Socket("localhost", 5001);
	 		//방법2: InetSocketAddress()객체를 매개값으로 전달하여 생성
	 			Socket socket = new Socket( new InetSocketAddress("localhost", 5001) );
 		} catch(UnknownHostException e) {
 			//IP주소 표기 방법이 잘못되었을 경우
 		} catch(IOException e) {
 			//해당 포트의 서버에 연결할 수 없는 경우
 		}
 		
 		//방법3: 소켓을 생성후, InetSocketAddress객체를 전달하여 생성
 		socket = new Socket();
 		socket.connect( new InetSocketAddress("localhost", 5001) );
 		
 	연결 끊기
 	:통신을 더이상 하고 싶지 않을 때 사용
		try{
			socket.close();
		} catch(IOException e) {} 
		
Socket 데이터 통신
	//Socket객체로 데이터를 통신하는 방법
		//클라이언트가 연결요청(connect())을 하고 서버가 연결수락(accept())을 했다면, 양쪽의 Socket 객체로부터 각각 입출력스트림을 얻을 수 있다.
		//클라이언트 Socket과 서버의 Socket은 서로 데이터를 주고 받을 수 있는데,
		//클라이언트에서 데이터를 받고 싶다면, Socket으로부터 InputStream을 얻어서 데이터를 받고, 서버로 데이터를 보내고 싶으면 Socket으로부터 OutputStream을 얻어서 데이터를 보내면 된다.
		//서버도 클라이언트로부터 데이터를 받고 싶다면, Socket으로부터 InputStream을 얻어서 데이터를 받고, 클라이언트로 데이터를 보내고 싶으면 Socket으로부터 OutputStream을 얻어서 데이터를 보내면 된다.
	
	Socket으로부터 입출력 스트림 얻기
		//입력 스트림 얻기
		InputStream is = socket.getInputStream();
		//출력 스트림 얻기
		OutputStream os = socket.getOutputStream*();
		
	Socket으로부터 데이터 보내기
		String data = "보낼 데이터";
		byte[] byteArr = data.getBytes("UTF-8");
		OutputStream outputStream = socket.getOutputStream();
		outputStream.write(byteArr);
		outputStream.flush();
		
	Socket으로부터 데이터 받기
		byte[] byteArr = new byte[100];
		InputStream inputStream = socket.getInputStream();
		int readByteCount = inputStream(byteArr);
		String data = new String(byteArr, 0, readCount, "UTF-8");
		
	read()의 블로킹 해제
		블로킹이 해제되는 경우						리턴값
		상대방이 데이터를 보냈을 때					읽은 바이트 수
		상대방이 정상적으로 Socket의 close()를 호출	-1
		상대방이 비정상적으로 종료					IOException 발생
		
스레드 병렬처리
	클라이언트가 서버에 연결 요청을 하고, 서버가 연결수락을 한 뒤에, 서버와 클라이언트는 서로 통신을 하게 된다.
	이 과정에서 블로킹(대기상태)메소드가 사용이 된다.
	
	블로킹(대기상태)이 되는 메소드
		ServerSocket의 accept()메소드			//서버 측
		Socket의 생성자 또는 connect()메소드 	//클라이언트 측
		Socket의 read(), write()메소드		//양측의 Socket객체
	
	병렬처리(동시작업처리)의 필요성 
		스레드가 블로킹되면 다른 작업을 수행하지 못한다
			입출력 할 동안 다른 클라이언트의 연결 요청을 수락하지 못한다.
			입출력 할 동안 다른 클라이언트의 입출력을 하지 못한다.
		UI생성/변경 스레드에서 블로킹 메소드를 호출하지 않도록 한다.
			UI생성 및 변경이 안되고 이벤트 처리가 이뤄지지 않는다.
		
	스레드 병렬처리
		서버가 별도의 작업 스레드를 생성하고, 다중 클라이언트와 병렬적으로 통신을 하게되면,
		클라이언트의 수가 증가 할수록, 서버에 스레드 개수가 증가하여, 서버의 성능이 저하되고 다운되는 현상이 발생할 수 있다.
		클라이언트의 폭증으로 인해 서버의 과도한 스레드 생성을 방지하려면 스레드풀을 사용하는 것이 바람직하다.
	
	스레드풀을 이용한 서버 구현
		1. 클라이언트가 연결 요청을 하면,
		2. 서버의 스레드풀에서 연결 수락을 하고 Socket을 생성한다.
		3. 클라이언트가 작업 처리 요청을 하면,
		4. 서버의 스레드풀에서 요청을 처리하고,
		5. 응답을 클라이언트로 보낸다.
		
		스레드풀 사용의 이점
			스레드 수를 제한해서 사용하기 때문에 갑작스런 클라이언트의 폭증은 작업 큐의 작업량만 증가시킬뿐, 스레드 수는 변함이 없기 때문에 서버 성능은 완만히 저하된다.
			다만, 대기하는 작업량이 많을 경우 개별 클라이언트에서 응답을 늦게 받을 수 있다.
			
	
입력 스트림과 출력 스트림 개념
	프로그램은 입력 스트림을 통해 데이터를 읽음
	프로그램은 출력 스트림을 통해 데이터를 보냄
	
바이트 기반 스트림과 문자 기반 스트림
	바이트 기반 스트림: 스트림을 통해 주고 받는 데이터가 바이트라면.
		그림, 멀티미디어, 문자 등 모든 종류의 데이터를 받고 보낼 수 있다.
	
	문자 기반 스트림: 스트림을 통해 주고 받는 데이터가 문자라면.
		문자만 받고 보낼 수 있도록 특화되어 있다.
		
		구분		::		바이트 기반 스트림				::		문자 기반 스트림
				::	입력 스트림	::	출력 스트림		::	입력 스트림	::	출력 스트림
	최상위 클래스	::	InputStream	::	OutputStream	::	Reader		::	Writer
	하위 클래스	::XXXInputStream::XXXOutputStream	::	XXXReader	::	XXXWriter
		예)		::FileInputStream:FileOutputStream	::	FileReader	::	FileWriter
	
	
	
InputStream
	바이트 기반 입력 스트림의 최상위 클래스로 "추상 클래스"이다. 
	따라서, new연산자로 객체를 생성할 수 없다.
	대신, InputStream을 상속한 하위 클래스로 객체를 생성할 수는 있다.
	또한, 다른 API에 리턴 타입으로 제공이 되기 때문에 직접적으로 InputStream을 객체로 생성할 일이 없다. 
	최상위 클래스이기 때문에, 데이터를 읽는 메소드는 모든 하위 클래스의 XXXInputStream에서 사용 가능하다.
	
	InputStream의 주요 메소드
		int		::	read()							::	입력 스트림으로부터 1 바이트를 읽고 읽은 바이트를 리턴한다.
													::	매개값이 없고, 스트림으로부터 하나의 바이트를 읽고, int타입(4바이트)으로 반환하는데, 4바이트의 끝(1바이트)에 읽은 바이트 값을 저장한다.
													::	읽을 바이트 값이 없으면 -1을 반환한다.

		int		::	read(byte[] b)					::	입력 스트림으로부터 읽은 바이트들을 매개값으로 주어진 바이트 배열 b에 저장하고 실제로 읽은 바이트 수를 리턴한다.
		
		int		::	read(byte[] b, int off, int len)::	입력 스트림으로부터 len개의 바이트 만큼 읽고,
													::	매개값으로 주어진 바이트 배열 b[off]부터 len개까지 저장한다.
													::	그리고 실제로 읽은 바이트 수인 len개를 리턴한다.
													::	만약 len개를 모두 읽지 못하면 실제로 읽은 바이트 수를 리턴한다.
													
		void	::	close()							::	사용한 시스템 자원을 반납하고, 입력 스트림을 닫는다.
		
		
	read()메소드 사용
		InputStream is = new FileInputStream("C:/test.jpg"); //5바이트 크기의 파일을 매개값으로 생성
		int readByte;
		while( (readByte=is.read()) != -1 ) {...} // 더이상 읽을 바이트가 없으면, -1을 반환한다.
		
	
	read(byte[] b)메소드 사용
		읽은 바이트 수를 리턴한다.
			3		=		read(byte[] b)
				read(byte[] b)메소드는 주어진 3바이트를 읽고, 바이트 배열에 저장
				남은 바이트가 있다면, 다음 읽을 때, 남은 바이트를 저장
				이때, 남은 바이트가 3보다 작다면, 마지막 바이트에는 전에 읽은 데이터가 남아있는 상태가 된다.
	
	read(byte[] b, int off, int len)메소드 사용
		읽은 바이트 수를 리턴한다
			3		=		read(byte[] b, 2,3)
				주어진 off인덱스로부터 len길이만큼 바이트배열에 저장
		
		
		InputStream is = ...;
		byte[] readBytes = new byte[100];
		int readByteNo = is.read(readBytes); // 매개값으로 주어진 배열의 길이만큼 데이터를 읽고, 실제 읽은 바이트를 리턴
		위 코드와 아래의 코드는 동일하다.
		
		InputStream is = ...;
		byte[] readBytes = new byte[100];
		int readByteNo = is.read(readBytes, 0, 100); //readBytes배열의 0인덱스부터 100개를 읽고, 실제 읽은 바이트를 리턴
		
	close()메소드
		IntputStream을 더 이상 사용하지 않을 경우 호출해준다.
		InputStream에서 사용했던 시스템 자원을 풀어주는 역할을 한다.
			닫혀야 다른 프로그램에서 사용가능하다.
	
OutputStream
	바이트 기반 출력 스트림의 최상위 클래스로 "추상메소드"이다.
	따라서, new연산자로 객체를 생성할 수 없다.
	대신, OutputStream을 상속한 하위 클래스로 객체를 생성할 수는 있다.
	또한, 다른 API에 리턴 타입으로 제공이 되기 때문에 직접적으로 OutputStream을 객체로 생성할 일이 없다. 
	최상위 클래스이기 때문에, 데이터를 읽는 메소드는 모든 하위 클래스의 XXXOutputStream에서 사용 가능하다.

	OutputStream의 주요 메소드
	   void		::	write(int b)					::	출력 스트림으로 1 바이트를 보낸다.
													::	

	   void		::	write(byte[] b)					::	출력 스트림에 매개값으로 주어진 바이트 배열 b의 바이트를 보낸다.
		
	   void		::	write(byte[] b, int off, int len):	출력 스트림에 매개값으로 주어진 바이트 배열 b[off] len개까지의 바이트를 보낸다.
													::	

	   void		::	flush()							::	버퍼에 잔류하는 모든 바이트를 출력한다.
	   
	   void		::	close()							::	사용한 시스템 자원을 반납하고, 출력 스트림을 닫는다.
		

	write(int b) 메소드
		OutputStream os = new FileOutputStream("파일경로");
		byte[] data = "ABC".getBytes();
		for(int i=0; i< data.length; i++) {
			os.write(data[i]); //"A", "B", "C"를 하나씩 출력
		}
		
	write(byte[] b) 메소드
		OutputStream os = new FileOutputStream("파일경로");
		byte[] data = "ABC".getBytes();
		os.write(data);	//"ABC"를 모두 출력
					   	//주어진 byte배열을 모두 출력하므로, for문이 필요없다.
					   
  	write(byte[] b, int off, int len) 메소드
  		OutputStream os = new FileOutputStream("파일경로");
		byte[] data = "ABC".getBytes();
		os.write(data,1,2); //1의 위치에서부터 2자만 출력 "BC"만 출력
		
	flush()와 close()메소드
		OutputStream os = new FileOutputStream("파일경로");
		byte[] data = "ABC".getBytes();
		os.write(data);
		
		//어떠한 출력스트림을 얻었다고 할지라도,
		//write()를 하고나서는 반드시 flush()를 호출해야 write()한 데이터가 출력되지 않는다.(저장되지 않는다)
		os.flush();
		
		//그리고 나서 더이상 스트림을 사용하지 않을 때는 반드시 close()해야 한다.
		os.close();

Reader
	문자 기반 입력 스트림의 최상위 클래스로 "추상클래스"이다.

	Reader의 주요 메소드
		int		read()				입력 스트림으로부터 한 개의 문자(2바이트)를 읽고 리턴한다.
		int 	read(char[] cbuf)	입력 스트림으로부터 읽은 문자들을 매개값으로 주어진 배열 cbuf에 저장하고, 실제로 읽은 문자 수를 리턴한다.
		int		read(char[] cbuf,	입력 스트림으로부터 len개의 문자를 읽고 매개값으로 주어진 문자 배열 cbuf[off]부터 len개까지 저장한다. 그리고 실제로 읽은 문자 수인 len개를 리턴한다.
					int off, int len)
		void	close()				사용한 시스템 자원을 반납하고 입력 스트림을 닫는다.

	read() 메소드
		한 번에 한 문자를 읽어서 int로 리턴한다.
		read()실행 시, 한 문자(2byte)를 읽어서, int(4byte)의 끝 2byte에 저장하고, 리턴
		
		Reader reader = new FileReader("");
		int readData;
		while( (readData = reader.read()) != -1) {
			char charData = (char) readData;
		}
		//read()메소드는 더이상 읽을 문자가 없으면 -1을 반환한다
		
	read(char[] cbuf) 메소드
		읽은 문자를 매개값으로 주어진 char배열 cbuf에 저장하고, 읽은 문자 수를 리턴
		Reader reader = new FileReader("");
		int readCharNo;
		char[] cbuf = new char[2];
		while( (readCharNo = reader.read(cbuf)) != -1) {
			char charData = (char) readData;
		}
		
	read(char[] cbuf, int off, int len) 메소드
		cbuf의 길이의 배열의 off위치에서 len길이만큼에 읽은 문자를 저장
	
		Reader reader = ...;
		char[] cbuf = new char[100];
		int readCharNo=is.read(cbuf);
		위의 코드와 아래의 코드는 똑같은 코드이다.
		
		Reader reader = ...;
		char[] cbuf = new char[100];
		int readCharNo=is.read(cbuf,0,100);
		
	close() 메소드	
		Reader를 더 이상 사용하지 않을 경우 호출해준다.
		Reader에서 사용했던 시스템 자원을 풀어준다.
		

Writer
	문자 기반 출력 스트림의 최상위 클래스로 "추상클래스"이다.
	종류:: FileWriter	BufferedWriter		PrintWriter		OutputStreamWriter
	Reader의 주요 메소드
		void	write(int c)				출력 스트림으로부터 매개값으로 주어진 (int값은 4byte이므로, int의 끝 2byte에 저장된)한 문자를 보낸다.
		void 	write(char[] cbuf)			출력 스트림에 매개값으로 주어진 문자 배열 cbuf의 문자를 보낸다.
		void	write(char[] cbuf,			출력 스트림에 매개값으로 주어진 문자 배열 cbuf의 off인덱스 위치부터 len개의 문자를 보낸다.
					int off, int len)
		void	write(String str)			출력 스트림에 매개값으로 주어진 문자열을 전부 보낸다.
		void	write(String str,			출력 스트림에 매개값으로 주어진 문자열의 off순번부터 len개 까지의 문자를 보낸다.
					int off, int len)	
		void 	flush()						버퍼에 잔류하는 모든 문자열을 출력한다.
			**write()에 의해서 출력된 데이터는 바로 목적지로 가는 것이 아니라,
			  버퍼에 쌓였다가 이동하는데, 이때 버퍼에 잔류하고 있는 데이터가 있을 수 있다.
			  그러한 잔류 데이터를 강제적으로 목적지로 보내기 위해서 사용하는 메소드가 
			  flush()메소드이다.
		void	close()						사용한 시스템 자원을 반납하고 출력 스트림을 닫는다.


	write(int c) 메소드
		매개값으로 제공된 int타입의 c의 끝 2byte에 있는 문자 정보가 출력이 된다.
			Writer writer = new FileWriter("파일경로");
			char[] data = "홍길동".toCharArray(); //문자열을 문자배열로 바꾸어준다.
			for(int i=0; i<data.length; i++) {
				writer.write(data[i]); //"홍","길","동"을 하나씩 출력
			}
			
	write(char[] cbuf) 메소드
		길이가 정해진 char배열이 매개값으로 주어진 경우,
		write(char[] cbuf)메소드는 주어진 배열의 모든 문자를 출력한다.	
			Writer writer = new FilWriter("파일경로");
			char[] data = "홍길동".toCharArray();
			writer.write(data); //"홍길동"을 배열로 전달하였으므로, 한번에 출력한다.
		
	write(char[] cbuf, int off, int len) 메소드
		매개값이 char배열, 시작인덱스, 길이 로 주어진 경우,
		가령, write(char[] cbuf, 1, 2)은
		cbuf문자 배열의 1인덱스로부터 2개의 문자를 출력하는 것이다.
			Writer writer = new FileWriter("파일경로");
			char[] data = "홍길동".toCharArray();
			writer.write(data,1,2); //"길동"만 출력한다.
		
	write(String str)와 write(String str, int off, int len) 메소드
			
		
	flush()와 close() 메소드	
		flush()는 버퍼를 비우는 역할
		write()메소드로 출력된 데이터는 일단 버퍼에 쌓였다가 전송이 됨.
		버퍼에 잔류하는 데이터가 있을 수 있기 때문에,
		flush()로 강제로 버퍼를 비우고 출력한다.
		close()는 writer를 다 쓴 다음에 닫는 역할을 한다. 
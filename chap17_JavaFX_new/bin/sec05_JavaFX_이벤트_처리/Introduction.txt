이벤트 핸들러
	마우스로 버튼을 클릭하는 등의 액션을 취할때,
	ActionEvent(액션이벤트)가 발생한다.
	이때, Button에 등록되어 있는 EventHandler(이벤트 핸들러)가 처리를 한다.(이를 위임형 모델 이라고 한다.)
	EventHandler에 있는 이벤트 처리 메소드가 실행되어 이벤트를 처리하고,
	이벤트 처리 결과(효과: 윈도우 닫기/ 컨트롤 내용 변경/ 다이얼로그 띄우기 등)를 반환한다.

		Button = new Button();
		//방법1
			button.setOnAction(new EvenetHandler<ActionEvent() {
				@Override
				public void handle(ActionEvent event) {...}
			});
				//setOnAction()는 액션이벤트가 발생했을때, 
				//매개값으로 주어진 EventHandler<ActionEvent>()가 이를 처리하도록 한다.
		//방법2
			button.setOnAction( event -> {...} ); 
				//EventHandler()는 함수적 인터페이스이므로, 이처럼 람다식으로 코드를 작성할 수도 있다.
		
		TableView tableView = new TableView();
		//방법1
			tableView.setOnMouseClicked(new EvenetHandler<MouseEvent>() {
				@Override
				public void handle(MouseEvent event) {...}
			});
		//방법2
			tableView.setOnMouseClicked( event -> {...});
		
FXML 컨트롤러
	FXML파일당 별도의 컨트롤러(Controller)를 지정해서 이벤트를 처리
		FXML 레이아웃과 이벤트 처리코드를 완전히 분리한다.
	
	fx:controller속성과 컨트롤러 클래스
		<루트컨테이너 xmlns:fx="http://javafx.com/fxml"
				fx:controller="packageName.ControllerName">
					//Controller의 패키지이름과 클래스이름을 제공한다. 이때 제공되는 Controller는 클래스로 선언되어 있어야 한다.
		..
		</루트컨테이너>
		
		//java코드
		public class ControllerName implments Initializable {
			@Override
			public void initialize(UTL location, ResourceBundle resources) {...}  
				//실행코드에 UI컨트롤의 초기화, 이벤트 핸들러 등록, 속성 감시 등의 코드를 넣는다.
		}
	
	fx:id 속성과 @FXML컨트롤 주입
		<Button fx:id="btn1" text="버튼1"/>
		<Button fx:id="btn2" text="버튼2"/>
		<Button fx:id="btn3" text="버튼3"/>
		
		//java코드
		public class ControllerName implements Initializable {
			@FXML [private] Button btn1;
			@FXML [private] Button btn2;
			@FXML [private] Button btn3;
				//@FXML어노테이션을 붙여서 fxml파일에 fx:id에 저장된 아이디로 필드 이름을 설정하면, fxml에서 선언된 객체가 java코드에서 참조될 수 있게 된다.
		}
		
	//fxml에 선언된 Controll의 참조를 Controller가 필드로 가지고 있다면,
	//Controller의 initialize()메소드가 필드를 이용해서 이벤트처리코드를 작성할 수 있다.
	//initialize()메소드는 Controller가 생성되면, 자동적으로 실행되는 메소드이다.
	//주로 이벤트 처리코드를 갖는다.
	//사용자가 사용하기 전에, Controller에서 발생할 수 있는 이벤트를 처리할 수 있는 이벤트핸들러 코드들이 작성이 된다.
	
	EventHandler 생성 및 등록
		public void initialize(URL location, ResourceBundle resources) {
			//직접 EventHandler 생성 후 등록
				btn1.setOnAction(new EventHandler<ActionEvent>() {
					@Override
					public void handle(ActionEvent event) {
						handleBtn1Action(event);
					}
				});
			//람다식을 이용하여 등록
				btn2.setOnAction( event -> handleBtn2Action(event) );
				btn3.setOnAction( event -> handleBtn3Action(event) );
		}

		public void handleBtn1Action(ActionEvent event) {
			System.out.println("버튼 1 클릭");
		}		
		public void handleBtn2Action(ActionEvent event) {
			System.out.println("버튼 2 클릭");
		}		
		public void handleBtn3Action(ActionEvent event) {
			System.out.println("버튼 3 클릭");
		}
		
		//또 다른 방법으로는, 정석은 아니지만, Button 컨트롤을 작성할때, onAction속성을 추가하여, 값으로 #과 함께 Controller의 메소드이름을 넘겨주고, 
		//컨트롤러에서는 메소드만 선언해주면, Button을 누르면 해당메소드가 실행된다.
			<Button fx:id="버튼아이디" text="버튼텍스트" onAction="#handleBtnAction"/>
			public void handleBtnAction(ActionEvent event) {...}